alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster + 1),
memprob = pinguino_hdbscan$membership_prob
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
#size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster + 1),
memprob = pinguino_hdbscan$membership_prob
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership probability"
) +
scale_color_jco()
pinguino_kmeans
pinguino_kmeans$centers
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_kmeans$cluster)
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster
),
size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "k-means Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
pinguino_kmeans <- pinguinos_baked %>%
kmeans(
centers = 3,
iter.max = 100
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_kmeans$cluster)
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster
),
size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "k-means Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
mean(pinguino_hdbscan$cluster_scores == 0)
pinguino_hdbscan$cluster_scores == 0
mean(pinguino_hdbscan$membership_prob == 0)
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership probability"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\n probability"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\nprobability"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob * 100
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\nprobability (%)"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob * 100
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\nprobability (%)"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob * 100
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\nprobability (%)"
) +
scale_color_jco()
knitr::opts_chunk$set(
echo = FALSE,
out.width = "85%",
fig.asp = 0.8,
fig.align = "center",
message = FALSE,
warning = FALSE
)
library(tidymodels)
library(magrittr)
library(ggsci)
library(stringr)
library(dbscan)
theme_set(theme_grey())
library(palmerpenguins)
pinguinos <- penguins %>%
rename(
culmen_length = bill_length_mm,
culmen_depth = bill_depth_mm,
flipper_length = flipper_length_mm,
body_mass = body_mass_g
)
pinguinos[sample(nrow(pinguinos)), ] %>%
head() %>%
knitr::kable()
pinguinos %>%
ggplot(aes(culmen_length, culmen_depth)) +
geom_point(
aes(
color = species
),
size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "culmen depth and length",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
pinguinos %>%
ggplot(aes(culmen_length, culmen_depth)) +
geom_point(
aes(
color = species,
alpha = body_mass,
size = body_mass
)
) +
labs(
subtitle = "culmen depth and length and body mass",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "body mass (g)",
alpha = "body mass (g)"
) +
scale_color_jco()
pinguinos %>%
filter(!is.na(body_mass)) %>%
ggplot(aes(species, body_mass)) +
geom_violin(
aes(
fill = species
),
alpha = 0.8
) +
geom_boxplot(
width = 0.05,
outlier.shape = NA
) +
labs(
subtitle = "body mass distribution by species",
x = "",
y = "body mass (g)"
) +
scale_fill_jco()
pinguinos %>%
drop_na() %>%
ggplot(aes(culmen_length, culmen_depth)) +
geom_point(
aes(
color = species,
shape = sex
),
size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "culmen depth and length, sex, and island",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
facet_grid(island ~ .) +
scale_color_jco()
pinguinos %>%
ggplot(aes(flipper_length, body_mass)) +
geom_point() +
geom_smooth(
method = "lm",
color = "black",
se = 0,
size = 0.8
) +
labs(
title = "flipper length vs body mass",
x = "flipper length (mm)",
y = "body mass (g)"
)
corr_flipper_to_mass <- pinguinos %>%
select(flipper_length, body_mass) %>%
filter(!is.na(flipper_length), !is.na(body_mass)) %>%
cor() %>% .[[2]]
# split training and test data
pinguino_split <- pinguinos %>%
select(-flipper_length, -year) %>%
drop_na() %>%
initial_split(
prop = 0.8
)
# define pre-processing recipe steps and process training data
pinguino_recipe <- training(pinguino_split) %>%
recipe(species ~ .) %>%
step_center(
all_numeric(),
-all_outcomes()
) %>% # normalize predictors to a mean of zero
step_scale(
all_numeric(),
-all_outcomes()
) %>% # normalize predictors to a standard deviation of one
step_dummy(all_nominal(), -species) %>% # use one-hot encoding for categorical predictors
prep()
# perform same pre-processing steps on test data
pinguino_testing <- pinguino_recipe %>%
bake(testing(pinguino_split))
# extract training data
pinguino_training <- juice(pinguino_recipe)
pinguino_forest <- rand_forest(
trees = 200,
mtry = 3,
mode = "classification"
) %>%
set_engine("randomForest") %>%
fit(species ~ ., data = pinguino_training)
pinguino_forest_accuracy <- pinguino_forest %>%
predict(pinguino_testing) %>%
bind_cols(pinguino_testing) %>%
metrics(truth = species, estimate = .pred_class) %$%
.estimate
cm <- pinguino_forest %>%
predict(pinguino_testing) %>%
bind_cols(pinguino_testing) %>%
conf_mat(truth = species, estimate = .pred_class)
autoplot(cm, type = "heatmap")
pinguino_knn <- nearest_neighbor(
neighbors = 5,
mode = "classification",
dist_power = 2,
weight_func = "optimal"
) %>%
set_engine("kknn") %>%
fit(species ~ ., data = pinguino_training)
pinguino_knn_accuracy <- pinguino_knn %>%
predict(pinguino_testing) %>%
bind_cols(pinguino_testing) %>%
metrics(truth = species, estimate = .pred_class) %$%
.estimate
pinguino_gboost <- boost_tree(
trees = 200,
mode = "classification",
learn_rate = 0.3,
tree_depth = 6
) %>%
set_engine("xgboost") %>%
fit(species ~ ., data = pinguino_training)
pinguino_gboost_accuracy <- pinguino_gboost %>%
predict(pinguino_testing) %>%
bind_cols(pinguino_testing) %>%
metrics(truth = species, estimate = .pred_class) %$%
.estimate
tribble(
~model, ~accuracy,
"random forest", 0.98789,
"k-nearest neighbors", 0.99417,
"gradient boost", 0.99102
) %>%
knitr::kable()
# remove species labels and work solely with unlabeled data
pinguinos_unl <- pinguinos %>%
select(-species) %>%
select(-flipper_length, -year) %>%
drop_na()
# re-bake training and test data
pinguinos_baked <- pinguino_recipe %>%
bake(pinguinos_unl)
pinguino_kmeans <- pinguinos_baked %>%
kmeans(
centers = 3,
iter.max = 100
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_kmeans$cluster)
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster
),
size = 2.5,
alpha = 0.8
) +
labs(
subtitle = "k-means Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)"
) +
scale_color_jco()
pinguino_hdbscan <- pinguinos_baked %>%
hdbscan(
minPts = 30,
)
pinguinos_unl %>%
mutate(
cluster = as.factor(pinguino_hdbscan$cluster),
memprob = pinguino_hdbscan$membership_prob * 100
) %>%
ggplot(
aes(culmen_length, culmen_depth)
) +
geom_point(
aes(
color = cluster,
size = memprob
),
alpha = 0.8
) +
labs(
subtitle = "HDBSCAN Clustering",
x = "culmen length (mm)",
y = "culmen depth (mm)",
size = "membership\nprobability (%)"
) +
scale_color_jco()
