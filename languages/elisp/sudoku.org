#+title: sudoku solver

Design Notes:
- The board (a list of lists of integers) is the fundamental datatype.

#+begin_src emacs-lisp
(load-file "~/repos/cora/src/cora.el")
#+end_src

#+begin_src emacs-lisp
(setq board '((0 0 1  8 0 0  0 0 0)
              (6 7 0  2 0 3  0 1 0)
              (2 0 5  7 0 0  6 0 3)

              (3 5 0  6 2 0  8 0 0)
              (7 6 2  0 5 8  3 0 0)
              (0 0 0  0 0 4  0 5 0)

              (0 9 0  5 8 6  0 0 0)
              (5 0 0  9 0 0  7 0 0)
              (0 2 6  4 3 0  5 9 0)))
#+end_src

#+begin_src emacs-lisp
; indexing into board
(list-ref board 3 6) ; 8
(list-ref board 1 1) ; 7
#+end_src

#+begin_src emacs-lisp
(defun list-to-hash-set (lst) ; move to Cora
  TODO)
#+end_src

#+begin_src emacs-lisp
;; read-col-values :: [[integer]] -> [integers]
(defun read-col-values (board col)
  "Return the set of values assigned to the column (COL) on the BOARD."
  (let ((values (foldl
                  (lambda (outer-acc row)
                    (foldl
                      (lambda (inner-acc pair)
                        (if (= col (car pair)) ; if column
                          (cons (cdr pair) inner-acc)
                          inner-acc))
                      outer-acc
                      (enumerate row)))
                  '()
                  board)))
    (list-to-hash-set values)))

;; list-to-hash-set ::
(defun list-to-hash-set (values) ; TODO move to Cora
  values)

(read-col-values board 0) ; (0 5 0 0 7 3 2 6 0)

;; read-row-values :: [[integer]] -> [integers]
(defun read-row-values (board row)
  "Return the set of values assigned to the ROW on the BOARD."
  (let ((values (TODO)))
    (list-to-hash-set values)))

;; read-cell-values :: [[integer]] -> [integers]
(defun read-cell-values (board cell)
  "Return the set of values assigned to the CELL on the BOARD."
  (let ((values (TODO)))
    (list-to-hash-set values)))
#+end_src
