#lang racket

(define make-stack
  (lambda ()
    (let ((stack (list)))
      (lambda (command . args)
        (cond ((equal? command 'push) (set! stack (cons (car args) stack)))
              ((equal? command 'pop) (let ((out (car stack)))
                                       (set! stack (cdr stack))
                                       out))
              ((equal? command 'peek) (car stack))
              ((equal? command 'show) (displayln stack))
              ((equal? command 'clear) (set! stack '()))
              (else (displayln "stack: command not found")))))))

(define exec-stack (make-stack))
(exec-stack 'show)
(exec-stack 'push 3)
(exec-stack 'push 1)
(exec-stack 'push 2)
(exec-stack 'show)
(exec-stack 'peek)
(exec-stack 'show)
(exec-stack 'pop)
(exec-stack 'show)
(exec-stack 'push 2)
(exec-stack 'push 5)
(exec-stack 'push 4)
(exec-stack 'push 0)
(exec-stack 'show)
(exec-stack 'clear)
(exec-stack 'show)
