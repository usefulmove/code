ncases = cases - lag(cases, default = cases[1]),
ndeaths = deaths - lag(deaths, default = deaths[1])
)
p_us_total <- covid_total()
p_us <- covid()
# state analysis (u.s.)
# calculate state risk predictions
state_risk_predictions <- states %>% distinct(state)
state_risk_predictions <- state_risk_predictions %>% # calculate risk prediction for each state
mutate(
risk_prediction = map_dbl(state_risk_predictions$state,
~ calculate_risk_prediction_state_c(.)
)
state_alarm <- 25
count_alarm_states <- sum(state_risk_predictions$risk_prediction >= state_alarm)
state_df <- state_risk_predictions %>% # highest risk predictions
filter(risk_prediction > 5) %>%
top_n(max(c(min(c(count_alarm_states,20)), 15)), risk_prediction)
# county analysis (u.s.)
# calculate county risk predictions
cnty_risk_predictions <- counties %>%
filter(county != "Unknown") %>%
distinct(county, state, fips) %>%
mutate(state = as.character(state), county = as.character(county))
cnty_risk_predictions <- cnty_risk_predictions %>% # add current risk predictions
mutate(risk_prediction = map2_dbl(cnty_risk_predictions$county,
cnty_risk_predictions$state,
~ calculate_risk_prediction_cnty_c(.x, .y)
)
cnty_table <- cnty_risk_predictions %>% # highest risk predictions
filter(risk_prediction > 5) %>%
top_n(16, risk_prediction) %>%
arrange(desc(risk_prediction)) %>%
mutate(
order = as.factor(row_number(risk_prediction)),
county = as.factor(county),
state = as.factor(state)
)
global_risk_predictions %>%
top_n(5, risk_prediction) %>%
ggplot(aes(fct_reorder(country, desc(risk_prediction)), risk_prediction)) +
geom_col(
width = 0.8,
alpha = 0.8,
fill = prim_color
) +
labs(
subtitle = "Countries with Highest Predicted Risk",
x = "",
y = expression(rho)
) +
scale_y_continuous(labels = scales::comma)
global_predictions_gdp %>%
mutate(country = recode(country,
"US" = "United States"
)
) %>%
filter(risk_prediction > 25) %>%
ggplot(aes(gdp_ppp_pcap, risk_prediction)) +
geom_point(
aes(color = continent),
alpha = 0.8,
size = 3.0
) +
ggrepel::geom_text_repel(
aes(label = country),
point.padding = 0.1,
segment.color = "grey"
) +
labs(
subtitle = "Prediction of COVID-19 Risk vs Gross Domestic Product",
x = "per capita GDP",
y = expression(rho)
) +
scale_x_continuous(
labels = scales::dollar
) +
scale_y_continuous(
trans = "log10",
labels = scales::comma
) +
coord_cartesian(
ylim = c(10, NA)
) +
scale_color_brewer(palette = "Set1")
total_us_cases <- us_live$cases[nrow(us_live)]
current_us_ncases <- us$ncases[nrow(us)]
total_us_deaths <- us_live$deaths[nrow(us_live)]
current_us_ndeaths <- us$ndeaths[nrow(us)]
p_us_total
p_us
eu_color <- "#fdb980"
us %>%
ggplot(mapping = aes(x = date)) +
# European Union
geom_smooth(
data = eu_combined_cases,
aes(date, ncases),
se = FALSE,
color = eu_color,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 0.8,
na.rm = TRUE,
show.legend = FALSE
) +
geom_point(
data = eu_combined_cases,
aes(date, ncases),
color = eu_color,
size = 1.0,
alpha = 0.8,
na.rm = TRUE,
show.legend = FALSE
) +
annotate(
geom = "text",
label = "European Union",
x = as.Date("2020-06-16"),
y = 9400,
color = eu_color,
size = 4.3
) +
# United States
geom_smooth(
aes(y = ncases),
se = FALSE,
color = prim_color,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 1.2,
na.rm = TRUE,
show.legend = FALSE
) +
geom_point(
aes(y = ncases, color = prim_color),
color = prim_color,
size = 1.5,
alpha = 0.8,
na.rm = TRUE,
show.legend = FALSE
) +
annotate(
geom = "text",
label = "United States",
x = as.Date("2020-06-08"),
y = 37500,
color = prim_color,
size = 4.5
) +
labs(
subtitle = "COVID-19 Case Rates:  United States and European Union",
x = "",
y = "cases (change)",
color = ""
) +
scale_y_continuous(
labels = scales::comma
) +
coord_cartesian(xlim = as.Date(c("2020-03-01",
Sys.Date()
),
origin = "1960-10-01"
)
state_df %>%
ggplot(
aes(x = reorder(state, risk_prediction), y = risk_prediction)) +
geom_hline(yintercept = state_alarm,
size = 0.5,
color = "darkgrey",
linetype = "dotted"
) +
geom_bar(
aes(fill = risk_prediction < state_alarm),
stat = "identity",
width = 0.8,
alpha = 0.8,
show.legend = FALSE
) +
coord_flip() +
labs(
subtitle = "States with Highest Predicted Risk",
x = "",
y = expression(rho),
fill = ""
) +
scale_fill_manual(values = c(prim_color, alt_color))
p1 <- covid("Florida")
p2 <- covid("Texas")
p3 <- covid("California")
p4 <- covid("New York")
p5 <- covid("Georgia")
p6 <- covid("New Jersey")
p7 <- covid("Louisiana")
p8 <- covid("Tennessee")
p9 <- covid("Missouri")
p10 <- covid("Oklahoma")
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, ncol = 2)
base_palette_len <- 10
get_palette <- colorRampPalette(pal_jco()(base_palette_len))
n_states <- n_distinct(cnty_table$state)
palette_len <- ifelse(n_states > base_palette_len, n_states, base_palette_len)
cnty_table %>%
mutate(county = fct_reorder(county, risk_prediction)) %>%
ggplot(aes(x = order, y = risk_prediction)) +
geom_bar(
aes(fill = fct_reorder2(state, county, risk_prediction)),
stat = "identity",
width = 0.8,
alpha = 0.8
) +
scale_x_discrete(labels = rev(cnty_table$county)) +
scale_fill_manual(values = get_palette(palette_len)) +
labs(
subtitle = "Counties with Highest Predicted Risk",
x = "",
y = expression(rho),
fill = "state"
) +
coord_flip()
#community_mobility <- readr::read_csv("./global-mobility-data/Global_Mobility_Report.csv", guess_max = 1e6)  # global mobility data
community_mobility <- readr::read_csv("https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv", guess_max = 1e6)  # global mobility data
community_mobility <- community_mobility %>%
mutate(date = as.Date(date))
df_highlights <- community_mobility %>%
filter(
is.na(sub_region_1),
is.na(sub_region_2),
country_region %in% c(
"United States",
"Italy",
"Spain",
"United Kingdom",
"France",
"Sweden",
"Ireland"
)
) %>%
rename(country = country_region)
p <- community_mobility %>%
left_join(regions, by = c("country_region" = "country")) %>%
filter(
is.na(sub_region_1),
is.na(sub_region_2),
country_region %in% c(eu_countries$Country, "Czechia")
) %>%
rename(country = country_region) %>%
ggplot(aes(date, retail_and_recreation_percent_change_from_baseline, group = country)) +
geom_hline(
yintercept = 0,
color = "grey",
) +
geom_smooth(
color = "#dddddd",
se = FALSE,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 0.5
) +
geom_smooth(
data = df_highlights,
aes(
date, retail_and_recreation_percent_change_from_baseline,
color = fct_reorder(country, desc(retail_and_recreation_percent_change_from_baseline))
),
se = FALSE,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 1.2
) +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Community Mobility: United States and European Union",
subtitle = "retail and recreation",
x = "",
y = "change from baseline",
color = "country"
) +
ggsci::scale_color_jco()
#plotly::ggplotly(p, tooltip = "country")
p
# United States
us_mobility <- community_mobility %>%  # u.s. mobility data
filter(
country_region_code == "US"
) %>%
rename(
country = country_region,  # country
state = sub_region_1,  # state
cnty = sub_region_2  # county
) %>%
select(
-country_region_code,
-(iso_3166_2_code:census_fips_code)
)
us_mobility_pivot <- us_mobility %>%
setNames(gsub("_percent_change_from_baseline", "", names(.))) %>%
pivot_longer(cols = retail_and_recreation:residential, names_to = "activity_category", values_to = "change_from_baseline")
us_mobility_pivot %>%
filter(
is.na(state),
is.na(cnty),
activity_category %in% c(
"retail_and_recreation",
"parks",
"residential",
"transit_stations"
)
) %>%  # u.s. country-level data
ded_recode(
activity_category,
"retail and recreation=retail_and_recreation",
"transit stations=transit_stations"
) %>%
ggplot(aes(date, change_from_baseline, group = activity_category)) +
geom_hline(
yintercept = 0,
color = "grey",
) +
geom_vline(
xintercept = as.Date("2020-03-13"),
color = "grey",
size = 1,
linetype = "dotted"
) + # u.s. declares national emergency
geom_smooth(
aes(color = activity_category),
se = FALSE,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 1.2
) +
coord_cartesian(
xlim = as.Date(c("2020-03-13", NA))
) +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Community Mobility - United States",
x = "", y = "change from baseline",
color = "activity"
) +
scale_color_jco()
us_mobility_pivot %>%
filter(
is.na(cnty),
activity_category %in% c(
"retail_and_recreation",
"transit_stations"
),
state %in% c(
"California",
"Texas",
"Arizona",
"Florida",
"Oklahoma",
"South Carolina",
"New York",
"District of Columbia"
)
) %>%
ded_recode(
activity_category,
"retail and recreation=retail_and_recreation",
"transit stations=transit_stations"
) %>%
ggplot(aes(date, change_from_baseline, color = state)) +
geom_hline(
yintercept = 0,
color = "grey",
) +
geom_vline(
xintercept = as.Date("2020-03-13"),
color = "grey",
size = 1,
linetype = "dotted"
) + # u.s. declares national emergency
geom_smooth(
se = FALSE,
method = "gam", formula = y ~ s(x, bs = "cs"), level = 0.9,
size = 1.2
) +
coord_cartesian(
xlim = as.Date(c("2020-03-13", NA)),
ylim = c(-75, 10)
) +
facet_grid(. ~ activity_category) +
labs(
title = "Community Mobility - States",
x = "", y = "change from baseline (%)",
color = "state"
) +
scale_color_jco()
cnty_mask_use <- mask_use_estimates %>%
mutate(
score = ALWAYS + FREQUENTLY ** 2  * SOMETIMES ** 4,
state_lower = str_to_lower(state),
county_lower = str_to_lower(county)
)
state_mask_use <- cnty_mask_use %>%
group_by(state) %>%
summarise(
score = mean(score),
.groups = "drop"
) %>%
mutate(
state_lower = str_to_lower(state)
)
states_map <- map_data("state")
states_map %>%
left_join(state_mask_use, by = c("region" = "state_lower")) %>%
ggplot(aes(long, lat, group = group, fill = (1 - score) - (1 - max(score)))) +
geom_polygon(color = "black", show.legend = FALSE) +
coord_map("albers", lat0=30, lat1=40) +
scale_fill_gradient2(high = "#b3040a") +
labs(
subtitle = "States with Lowest Community Mask Usage (July 14, 2020)",
x = "longitude",
y = "latitude",
caption = "Red indicates lowest mask usage."
)
counties_map <- map_data("county")
counties_map %>%
left_join(cnty_mask_use, by = c("region" = "state_lower", "subregion" = "county_lower")) %>%
ggplot(aes(long, lat, group = group, fill = 1 - score)) +
geom_polygon(color = "white", show.legend = FALSE) +
coord_map("albers", lat0=30, lat1=40) +
scale_fill_gradient2(high = "#b3040a") +
labs(
subtitle = "Counties with Lowest Community Mask Usage (July 14, 2020)",
x = "longitude",
y = "latitude",
caption = "Red indicates lowest mask usage. Grey indicates lack of mask usage data."
)
# face mask and risk prediction
state_mask_use_snapshot <- read_csv("./historical/state_mask_usage_20200728.csv")
state_risk_prediction_snapshot <- read_csv("./historical/state_risk_predictions_20200730.csv")
state_mask_use_snapshot %>%
left_join(state_risk_prediction_snapshot, by = "state") %>%
filter(
risk_prediction > 5
) %>%
mutate(
state = as_factor(state)
) %>%
ggplot(aes(score, risk_prediction)) +
geom_point(
aes(color = (risk_prediction > 25) & (score < 0.5)),
size = 3,
alpha = 0.8,
show.legend = FALSE
) +
labs(
subtitle = "Risk Compared with Mask Usage (July 30, 2020)",
x = "community mask usage",
y = expression(rho)
) +
scale_x_continuous(
labels = scales::percent
) +
coord_cartesian(
ylim = c(0, NA)
) +
ggrepel::geom_text_repel(
aes(label = state),
point.padding = 0.1,
segment.color = "grey"
) +
scale_color_jco()
us %>%
mutate(day = wday(date, label = TRUE)) %>%
group_by(day) %>%
summarise(
mean_ncases = mean(ncases),
mean_ndeaths = mean(ndeaths),
.groups = "drop"
) %>%
ggplot(aes(day, mean_ndeaths)) +
geom_col(
fill = prim_color,
alpha = 0.8
) +
labs(
subtitle = "Average Number of Reported Deaths by Day of the Week",
x = "day of week reported",
y = "mean of reported deaths"
) +
scale_y_continuous(labels = scales::comma)
beepr::beep(2)
covidc("Sacramento, California")
covidc("Riverside, California")
covidc("Orange, California")
covidc("Alameda, California")
covidc("Contra Costa, California")
covidc("Santa Clara, California")
covidc("San Francisco, California")
covidc("Howard, Texas")
covidc("Johnson, Texas")
covidc("Midland, Texas")
covidc("Ector, Texas")
covidc("Harris, Texas")
rmarkdown::render("covid.Rmd")
rmarkdown::render("covid.Rmd")
library(RMariaDB)
install.packages("RMariaDB")
install.packages("RMarisDB")
install.packages("RMariaDB")
rmarkdown::render("covid.Rmd")
getwd()
rmarkdown::render("/home/dedmonds/repos/code/covid/covid.Rmd")
rmarkdown::render("/home/dedmonds/repos/code/covid/covid.Rmd")
install.packages("safer")
rmarkdown::render("/home/dedmonds/repos/code/covid/covid.Rmd")
install.packages("sodium")
install.packages("sodium")
rmarkdown::render("/home/dedmonds/repos/code/covid/covid.Rmd")
install.packages("safer")
rmarkdown::render("/home/dedmonds/repos/code/covid/covid.Rmd")
